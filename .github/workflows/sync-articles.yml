name: Sync Content Between Repositories

on:
  schedule:
    # Run hourly
    - cron: '0 * * * *'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Sync Status Logging
        run: |
          echo "::group::Sync Job Started"
          echo "Starting content sync from medaffairs-articles to medaffairs.tech"
          echo "Trigger: ${{ github.event_name }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "::endgroup::"

      - name: Checkout source repository (medaffairs-articles)
        uses: actions/checkout@v4
        with:
          repository: Nick-PalPark/medaffairs-articles
          path: source-repo
          token: ${{ secrets.SOURCE_REPO_PAT }}
          fetch-depth: 1

      - name: Checkout destination repository (medaffairs.tech)
        uses: actions/checkout@v4
        with:
          repository: Nick-PalPark/medaffairs.tech
          path: destination-repo
          token: ${{ secrets.SOURCE_REPO_PAT }}
          fetch-depth: 1

      - name: Configure Git credentials
        run: |
          echo "::group::Git Configuration"
          cd destination-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          echo "Git configured for commits"
          echo "::endgroup::"

      - name: Sync content and check for changes
        id: sync_content
        run: |
          echo "::group::Content Sync Process"
          
          # Error handling - check if both repositories exist
          if [ ! -d "source-repo" ]; then
            echo "::error::Source repository not found"
            exit 1
          fi
          
          if [ ! -d "destination-repo" ]; then
            echo "::error::Destination repository not found"
            exit 1
          fi
          
          echo "Both repositories checked out successfully"
          
          # Check what content needs to be synced
          cd source-repo
          
          # List available content to sync
          echo "Source repository content:"
          ls -la
          
          # Determine what needs to be synced based on available content
          SYNC_NEEDED=false
          SYNC_SUMMARY=""
          
          # Check for articles-updated.json (highest priority)
          if [ -f "articles-updated.json" ]; then
            echo "Found articles-updated.json - syncing to destination"
            mkdir -p ../destination-repo/
            cp articles-updated.json ../destination-repo/articles-updated.json
            SYNC_NEEDED=true
            SYNC_SUMMARY="${SYNC_SUMMARY}articles-updated.json "
          fi
          
          # Check for articles.json (fallback)
          if [ -f "articles.json" ] && [ ! -f "articles-updated.json" ]; then
            echo "Found articles.json - syncing to destination as articles-updated.json"
            mkdir -p ../destination-repo/
            cp articles.json ../destination-repo/articles-updated.json
            SYNC_NEEDED=true
            SYNC_SUMMARY="${SYNC_SUMMARY}articles.json->articles-updated.json "
          fi
          
          # Check for static content (if it exists)
          if [ -d "static" ]; then
            echo "Found static directory - syncing to destination"
            mkdir -p ../destination-repo/
            cp -r static/* ../destination-repo/ 2>/dev/null || true
            SYNC_NEEDED=true
            SYNC_SUMMARY="${SYNC_SUMMARY}static/ "
          fi
          
          # Check for index.html
          if [ -f "index.html" ]; then
            echo "Found index.html - syncing to destination"
            cp index.html ../destination-repo/index.html
            SYNC_NEEDED=true
            SYNC_SUMMARY="${SYNC_SUMMARY}index.html "
          fi
          
          # Output sync status
          echo "sync_needed=$SYNC_NEEDED" >> $GITHUB_OUTPUT
          echo "sync_summary=$SYNC_SUMMARY" >> $GITHUB_OUTPUT
          
          if [ "$SYNC_NEEDED" = "false" ]; then
            echo "::warning::No content found to sync"
          else
            echo "Content synced: $SYNC_SUMMARY"
          fi
          
          echo "::endgroup::"

      - name: Commit and push changes
        if: steps.sync_content.outputs.sync_needed == 'true'
        run: |
          echo "::group::Commit and Push Changes"
          cd destination-repo
          
          # Check for actual changes
          if git status --porcelain | grep -q .; then
            echo "Changes detected in destination repository"
            git add .
            
            # Create detailed commit message
            git commit -m "Sync content from medaffairs-articles"
            
            # Push with error handling
            if git push; then
              echo "::notice::Successfully pushed changes to medaffairs.tech"
              echo "changes_pushed=true" >> $GITHUB_OUTPUT
            else
              echo "::error::Failed to push changes"
              exit 1
            fi
          else
            echo "::notice::No changes to commit - content already up to date"
            echo "changes_pushed=false" >> $GITHUB_OUTPUT
          fi
          
          echo "::endgroup::"

      - name: Skip empty runs
        if: steps.sync_content.outputs.sync_needed == 'false'
        run: |
          echo "::group::Empty Run Handling"
          echo "::notice::Skipping run - no content changes detected"
          echo "This is expected behavior when source content hasn't changed"
          echo "::endgroup::"

      - name: Sync completion logging
        if: always()
        run: |
          echo "::group::Sync Job Summary"
          echo "Sync Status: ${{ steps.sync_content.outputs.sync_needed == 'true' && 'SUCCESS' || 'SKIPPED' }}"
          echo "Content Synced: ${{ steps.sync_content.outputs.sync_summary || 'None' }}"
          echo "Changes Pushed: ${{ steps.sync_content.outputs.changes_pushed || 'N/A' }}"
          echo "End Time: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "::endgroup::"